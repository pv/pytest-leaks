{
    "docs": [
        {
            "location": "/",
            "text": "pytest-leaks - A pytest plugin to trace resource leaks\n\n\n\n\n\n\n\n\nA pytest plugin to trace resource leaks.\n\n\nUsage\n\n\nleaks:\n  -R LEAKS, --leaks=LEAKS\n                        runs each test several times and examines\n                        sys.gettotalrefcount() to see if the test appears to\n                        be leaking references. The argument should be of the\n                        form stab:run where 'stab' is the number of times the\n                        test is run to let gettotalrefcount settle down, 'run'\n                        is the number of times further it is run. These\n                        parameters all have defaults (5 and 4, respectively),\n                        and the minimal invocation is '-R :'.\n\n\n\nTo add a leaks test to your py.test session, add the \n-R\n option on the\ncommand line:\n\n\n$ cd examples; pytest-3 -v -R : test_faucet.py\n=========================== test session starts ===========================\nplatform linux -- Python 3.7.4, pytest-5.0.1, py-1.8.0, pluggy-0.12.0 --\ncachedir: .pytest_cache\nrootdir: ..\nplugins: leaks-0.3.0\ncollected 3 items\n\ntest_faucet.py::test_leaky_faucet LEAKED                            [ 33%]\ntest_faucet.py::test_broken_faucet FAILED                           [ 66%]\ntest_faucet.py::test_mended_faucet PASSED                           [100%]\n\n================================ FAILURES =================================\n___________________________ test_broken_faucet ____________________________\n\n    def test_broken_faucet():\n>       assert 0\nE       assert 0\n\ntest_faucet.py:6: AssertionError\n============================== leaks summary ==============================\nexamples/test_faucet.py::test_leaky_faucet: leaked references: [2, 2, 2, 2], memory blocks: [2, 2, 2, 2]\n============== 1 failed, 1 passed, 1 leaked in 0.32 seconds ===============\n\n\n\nThe test file used above contains the following code:\n\n\n$ cat test_faucet.py\ndrops = []\ndef test_leaky_faucet():\n    drops.append({})\n\ndef test_broken_faucet():\n    assert 0\n\ndef test_mended_faucet():\n    assert 1\n\n\n\nNote that pytest-leaks runs tests several times: if you see test failures\nthat are present only when using pytest-leaks, check that the test does\nnot modify any global state in a way that prevents it from running a\nsecond time.\n\n\nFeatures\n\n\n\n\nDetects memory leaks by running py.test tests repeatedly and\n  comparing total reference counts between the runs.\n\n\n\n\nRequirements\n\n\n\n\npy.test version >= 3;\n\n\nA debug build of Python (2.7 or >=3.5).\n\n\n\n\nOn Linux, Python debug builds can be found in packages \npythonX.Y-dbg\n\n(Debian and derivatives) and \npython3-debug\n (Fedora and derivatives).\n\n\nInstallation\n\n\nYou can install \"pytest-leaks\" via \npip\n from\n\nPyPI\n:\n\n\n$ pip install pytest-leaks\n\n\n\nContributing\n\n\nContributions are very welcome. Tests can be run with\n\ntox\n, please ensure the coverage\nat least stays the same before you submit a pull request.\n\n\nLicense\n\n\nDistributed under the terms of the \nMIT\n and\n\nPSF\n licenses, \"pytest-leaks\"\nis free and open source software.\n\n\nIssues\n\n\nIf you encounter any problems, please \nfile an issue\n\nalong with a detailed description.\n\n\nAcknowledgements\n\n\nThis \nPytest\n plugin was initially\ngenerated with \nCookiecutter\n\nalong with \n@hackebrot\n's\n\nCookiecutter-pytest-plugin\n\ntemplate.",
            "title": "Home"
        },
        {
            "location": "/#pytest-leaks-a-pytest-plugin-to-trace-resource-leaks",
            "text": "A pytest plugin to trace resource leaks.",
            "title": "pytest-leaks - A pytest plugin to trace resource leaks"
        },
        {
            "location": "/#usage",
            "text": "leaks:\n  -R LEAKS, --leaks=LEAKS\n                        runs each test several times and examines\n                        sys.gettotalrefcount() to see if the test appears to\n                        be leaking references. The argument should be of the\n                        form stab:run where 'stab' is the number of times the\n                        test is run to let gettotalrefcount settle down, 'run'\n                        is the number of times further it is run. These\n                        parameters all have defaults (5 and 4, respectively),\n                        and the minimal invocation is '-R :'.  To add a leaks test to your py.test session, add the  -R  option on the\ncommand line:  $ cd examples; pytest-3 -v -R : test_faucet.py\n=========================== test session starts ===========================\nplatform linux -- Python 3.7.4, pytest-5.0.1, py-1.8.0, pluggy-0.12.0 --\ncachedir: .pytest_cache\nrootdir: ..\nplugins: leaks-0.3.0\ncollected 3 items\n\ntest_faucet.py::test_leaky_faucet LEAKED                            [ 33%]\ntest_faucet.py::test_broken_faucet FAILED                           [ 66%]\ntest_faucet.py::test_mended_faucet PASSED                           [100%]\n\n================================ FAILURES =================================\n___________________________ test_broken_faucet ____________________________\n\n    def test_broken_faucet():\n>       assert 0\nE       assert 0\n\ntest_faucet.py:6: AssertionError\n============================== leaks summary ==============================\nexamples/test_faucet.py::test_leaky_faucet: leaked references: [2, 2, 2, 2], memory blocks: [2, 2, 2, 2]\n============== 1 failed, 1 passed, 1 leaked in 0.32 seconds ===============  The test file used above contains the following code:  $ cat test_faucet.py\ndrops = []\ndef test_leaky_faucet():\n    drops.append({})\n\ndef test_broken_faucet():\n    assert 0\n\ndef test_mended_faucet():\n    assert 1  Note that pytest-leaks runs tests several times: if you see test failures\nthat are present only when using pytest-leaks, check that the test does\nnot modify any global state in a way that prevents it from running a\nsecond time.",
            "title": "Usage"
        },
        {
            "location": "/#features",
            "text": "Detects memory leaks by running py.test tests repeatedly and\n  comparing total reference counts between the runs.",
            "title": "Features"
        },
        {
            "location": "/#requirements",
            "text": "py.test version >= 3;  A debug build of Python (2.7 or >=3.5).   On Linux, Python debug builds can be found in packages  pythonX.Y-dbg \n(Debian and derivatives) and  python3-debug  (Fedora and derivatives).",
            "title": "Requirements"
        },
        {
            "location": "/#installation",
            "text": "You can install \"pytest-leaks\" via  pip  from PyPI :  $ pip install pytest-leaks",
            "title": "Installation"
        },
        {
            "location": "/#contributing",
            "text": "Contributions are very welcome. Tests can be run with tox , please ensure the coverage\nat least stays the same before you submit a pull request.",
            "title": "Contributing"
        },
        {
            "location": "/#license",
            "text": "Distributed under the terms of the  MIT  and PSF  licenses, \"pytest-leaks\"\nis free and open source software.",
            "title": "License"
        },
        {
            "location": "/#issues",
            "text": "If you encounter any problems, please  file an issue \nalong with a detailed description.",
            "title": "Issues"
        },
        {
            "location": "/#acknowledgements",
            "text": "This  Pytest  plugin was initially\ngenerated with  Cookiecutter \nalong with  @hackebrot 's Cookiecutter-pytest-plugin \ntemplate.",
            "title": "Acknowledgements"
        }
    ]
}